@use '../helpers' as *;

.hero {
  &__main {


    @include tablet-above {
      //для минимальной ширины 1024px и более
      display: grid;
      grid-template-columns: 60% auto; //Как получили? Взяли ширину с заголовком h1 - 717, прибавили padding справа 40, разделили на ширину контейнера 1600. На видео ширина была
      //Другая, поэтому взяли 60%, у меня получилось другое значение, но я решил оставить пока что все как по туториалу. 2 колонка занимает оставшееся пространство - auto
      grid-template-areas:
      'body resources-preview'
      'metrics resources-preview';
    ;
      //В этом свойстве нам нужно указать ключевые слова для каждой ячейки нашей двухколоночной сетки с 2 колонками и 2 рядами
    }
  }

  &__body {
    grid-area: body;
    padding-top: rem(150);
    padding-right: rem(50);
    padding-bottom: rem(100);

    @include laptop {
      padding-top: rem(100);
      padding-right: rem(40);
    }

    @include tablet {
      padding-right: 0;
      padding-top: rem(40);
      padding-block: rem(30);
    }
  }

  &__subtitle {
    @include fluid-text(30, 18);

    font-family: var(--font-family-accent);
    font-weight: 500;
    color: var(--color-dark-40);

    //По идее можно написать просто margin-bottom, но конструкция с last-child делается для того, чтобы в будущем,
    //если элемент станет вдруг последним в списке, то margin ему будет вовсе не нужен
    &:not(:last-child) {
      margin-bottom: rem(30);

      @include mobile {
        margin-bottom: rem(14);
      }
    }
  }

  &__title {
    &:not(:last-child) {
      margin-bottom: rem(20);

      @include mobile {
        margin-bottom: rem(10);
      }
    }
  }

  &__resources-preview {
    grid-area: resources-preview;
    padding-left: rem(80);
    padding-bottom: rem(80);
    border-left: var(--border);
    background:
      url('../../images/resources-preview/bg.png') 0 0/cover no-repeat; //Позиционирование от верхнего левого угла 0 0

    @include laptop {
      padding-left: rem(50);
      padding-bottom: rem(50);
    }

    @include tablet-above {
      border-left: var(--border);
    }

    @include tablet {
      width: 100vw; //ширина на полный экран
      margin-left: calc(var(--container-padding-x) * -1);
      padding: rem(100) rem(40) rem(40);
      background-image: url('../../images/resources-preview/bg_tablet.png');
      background-size: contain;
    }
  }

  &__metrics {
    grid-area: metrics;

    @include tablet-above {
      border-top: var(--border);
    }

    @include tablet {
      &::before {
        width: 100vw; //ширина на полный экран
        right: calc(var(--container-padding-x) * -1);

      }
    }
  }

  &__advantages {
    border-block: var(--border); //Одновременно указываем бордер для топ и боттом
      &-list { //Изначально код в tablet-above был вне этого миксина, его поставили туда, чтобы использовать mobile-first подход
        @include tablet-above {
          display: grid;
          grid-template-columns: repeat(3, 1fr); //Грид сетка из 3 равных колонок
        }
      }

      &-item {
        --paddingX: #{rem(80)};

        padding-block: rem(50);

        @include laptop {
          --paddingX: #{rem(50)};

          padding-block: rem(40);
        }

        @include tablet-above { //Нужны только при разрешении больше 1023, метод mobile-first
          &:not(:first-child) {
            padding-left: var(--paddingX);
          }

          &:not(:last-child) {
            padding-right: var(--paddingX);
            border-right: var(--border);
          }
        }

        @include tablet {
          padding-block: rem(30);

          &:not(:last-child) {
            border-bottom: var(--border);
          }
        }
      }
  }
}